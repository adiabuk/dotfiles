#!/usr/bin/env bash
# vim: fdm=marker
# shellcheck disable=SC1091,SC1090

# {{{ Determine if Mac or Linux
unamestr=$(uname)
if [[ "$unamestr" == 'Linux' ]]; then
  platform='linux'
elif [[ "$unamestr" == 'Darwin' ]]; then
  platform='mac'
else
  platform='unknown'
fi
# }}}

# {{{ Autostart ssh-agent
if ! pgrep -u "$USER" ssh-agent &> /dev/null; then
    ssh-agent > ~/.ssh-agent-thing 2>/dev/null
fi
if [[ "$SSH_AGENT_PID" == "" ]]; then
    eval "$(<~/.ssh-agent-thing)" &>/dev/null
fi
# }}}

# {{{ How to start vim/emacs
alias vi='vim'
if [[ $platform == 'mac' ]]; then
  alias emacs='/Applications/Emacs.app/Contents/MacOS/Emacs -nw';
  alias xemacs='/Applications/Emacs.app/Contents/MacOS/Emacs';
else
  # only alias if gvim exists
  [[ $(which gvim 2>/dev/null) ]] && alias vim='gvim -vn'
  alias emacs='emacs -nw'
  alias xemacs='/usr/sbin/emacs'

fi
# }}}

# {{{ command completion
for completion in "$HOME"/.bash_completion.d/*.sh; do
  source "$completion";
done
complete -cf sudo
# }}}

# {{{ aliases
alias mv='mv -i'
alias dmesg='dmesg -T'
alias lesspipe='lesspipe.sh'
alias cls='clear'
alias watch='watch '
alias vim100='vim -c "set colorcolumn=101"'
alias lists='emacs ~/repos/personal/org-mode/remember.org ~/repos/personal/org-mode/todo.org'
alias xlists='xemacs ~/repos/personal/org-mode/remember.org ~/repos/personal/org-mode/todo.org &'
alias progress="watch -n1 '~/repos/personal/org-mode/progress.sh'"
alias epoch="date +%s"
alias retropie_setup='sudo /home/pi/RetroPie-Setup/retropie_setup.sh'


# use color and group dirs
alias ls="ls --color=always --group-directories-first --ignore=*.pyc"
alias ll="ls -l"
alias grep="grep --color" # use color in grep
alias ssh="ssh -Y" # X11 forwarding for vim yank to clipboard
[[ $platform == "linux" ]] && alias open="xdg-open" # don"t do on mac
alias json="python -mjson.tool" # pretty print json from stdin
alias json2="jq"  # another json formatter
alias xml="xmllint --format" # pretty print xml from stdin
alias webserver="python2 -mSimpleHTTPServer" # start a weberver (port as arg)
alias clipboard="xsel -i -b" # send stdin to clipboard
alias pastebin="~/bin/paste" # send stdin to pastebin
alias hdmi_on="xrandr --output HDMI1 --mode 1920x1080 --right-of eDP1"
alias hdmi_off="xrandr --output HDMI1 --off"
alias sudo="sudo "
alias pacman="pacwait"
alias col_sum="awk '{s+=\$NF} END {print s}" # FIXME - read in arg for col num
alias df="df --total -x tmpfs -x dev"
alias which="which_function"
alias pip26="sudo python2.6 /usr/bin/pip2"
alias per="cd ~/repos/personal"
alias cb="cd ~/repos/cultbeauty"
alias less="less -R"  # parse control characters
alias tidy="tidy -config ~/tidy_config.txt"
alias kvm="qemu-system-x86_64 --enable-kvm"
# }}}

# {{{ bash history
export HISTFILESIZE=-1 # Number of lines on disk ~/.bash_history
export HISTSIZE=130000 # Number of lines in memory
export HISTCONTROL=ignoreboth:erasedups
export HISTIGNORE="ls:cd:exit:clear"
export HISTTIMEFORMAT="$(echo -e '\r\e[K')"
export PROMPT_COMMAND="history -a; history -r; history -n"
PROMPT_COMMAND="history -a;history -c; history -r;$PROMPT_COMMAND"
export HOSTALIASES=~/.hosts
shopt -s cmdhist
shopt -s histappend
shopt -s checkwinsize
# }}}

# {{{ vars
export VISUAL=vim
export LANG=en_GB.UTF-8

# better yaourt colors
export YAOURT_COLORS="nb=1:pkg=1:ver=1;32:lver=1;45:installed=1;42:grp=1;34:od=1;41;5:votes=1;44:dsc=0:other=1;35"

#eval "$(dircolors)" # show files and directories with std colors
export LS_COLORS='rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=00:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arc=01;31:*.arj=01;31:*.taz=01;31:*.lha=01;31:*.lz4=01;31:*.lzh=01;31:*.lzma=01;31:*.tlz=01;31:*.txz=01;31:*.tzo=01;31:*.t7z=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.dz=01;31:*.gz=01;31:*.lrz=01;31:*.lz=01;31:*.lzo=01;31:*.xz=01;31:*.bz2=01;31:*.bz=01;31:*.tbz=01;31:*.tbz2=01;31:*.tz=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.war=01;31:*.ear=01;31:*.sar=01;31:*.rar=01;31:*.alz=01;31:*.ace=01;31:*.zoo=01;31:*.cpio=01;31:*.7z=01;31:*.rz=01;31:*.cab=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.svg=01;35:*.svgz=01;35:*.mng=01;35:*.pcx=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.m2v=01;35:*.mkv=01;35:*.webm=01;35:*.ogm=01;35:*.mp4=01;35:*.m4v=01;35:*.mp4v=01;35:*.vob=01;35:*.qt=01;35:*.nuv=01;35:*.wmv=01;35:*.asf=01;35:*.rm=01;35:*.rmvb=01;35:*.flc=01;35:*.avi=01;35:*.fli=01;35:*.flv=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.yuv=01;35:*.cgm=01;35:*.emf=01;35:*.ogv=01;35:*.ogx=01;35:*.aac=00;36:*.au=00;36:*.flac=00;36:*.m4a=00;36:*.mid=00;36:*.midi=00;36:*.mka=00;36:*.mp3=00;36:*.mpc=00;36:*.ogg=00;36:*.ra=00;36:*.wav=00;36:*.oga=00;36:*.opus=00;36:*.spx=00;36:*.xspf=00;36:';
export LS_COLORS
if [ -d "$HOME/bin" ] ; then
    PATH="$HOME/bin:$PATH"
fi
if [ -f /usr/bin/setxkbmap ]; then
  setxkbmap -option terminate:ctrl_alt_bksp # alt+ctl+backsp to kill X11
fi
[[ $platform == "mac" ]] &&  export PATH="$(/usr/local/bin/brew --prefix coreutils)/libexec/gnubin:/usr/local/bin:/opt/local/bin:/opt/local/sbin:$PATH"
#dbus-update-activation-environment --all
# }}}

# {{{for ruby
#export PATH=$HOME/.rbenv/bin:$HOME/.rbenv/shims:$PATH:$HOME/.gem/ruby/2.3.0/bin
export PATH=$HOME/.rbenv/versions/2.1.8/bin:$PATH
if [ -f /usr/bin/rbenv ]; then
  eval "$(rbenv init -)" &> /dev/null
fi
# }}}

# {{{ Pyenv
export ConEmuDefaultCp=65001
export PYTHONIOENCODING=utf-8
if [ -d "$HOME/.pyenv" ]; then
 export PYENV_ROOT="$HOME/.pyenv"
 PYENV_BIN="${PYENV_ROOT}/versions/$(/usr/bin/env pyenv version-name)/bin/"
 export PATH="$PYENV_BIN:$PYENV_ROOT/bin:$PATH"
 eval "$(pyenv init -)"
fi

#}}}

# {{{ functions

# {{{ render markdown as html

function markdown(){

pandoc -t html $1 | lynx -stdin
}


# }}}

# {{{ make and cd into tmp directory
function cdtmp(){
cd $(mktemp -d /tmp/"$USER"-XXXXXX) # create and enter new tmp dir
}
# }}}

# {{{ command-not-found override function
command_not_found_handle ()
{
    local pkgs cmd=$1;
    local FUNCNEST=10;
    set +o verbose;
    mapfile -t pkgs < <(pkgfile -bv -- "$cmd" 2>/dev/null);
    if [[ ${#pkgs[*]} -eq 1 && -n $PKGFILE_PROMPT_INSTALL_MISSING ]]; then
        local pkg=${pkgs[0]%% *};
        local response;
        read -r -p "Install $pkg? [Y/n] " response;
        [[ -z $response || $response = [Yy] ]] || return 0;
        printf '\n';
        sudo yaourt -S --noconfirm -- "$pkg";
        return 0;
    fi;
    if (( ${#pkgs[*]} )); then
        printf '%s may be found in the following packages:\n' "$cmd";
        printf '  %s\n' "${pkgs[@]}";
        return 0;
    fi
    aur_pkgs=$(aur_hook.py "$cmd");
    exit_code=$?
    if  (( ${#aur_pkgs[*]} )) && (( $exit_code == 0 )); then
      printf '%s might be found in the following AUR packages:\n' "$cmd";
      printf '  %s\n' "${aur_pkgs[@]}";
      return 0;
    else
        printf "bash: %s: command not found\n" "$cmd" 1>&2;
        return 127;
    fi
}

# }}}

# {{{ remove_symlink

function remove_symlink(){
  # Turn link into a file
  if [[ -z $1 ]]; then
    echo "specifify symlink to turn into file"
  elif [[ ! -h $1 ]] || [[ ! -a $1 ]]; then
    echo "$1 is not a valid symlink"
  else
    cp --remove-destination "$(readlink "$1")" "$1"
  fi
}

# }}}

# {{{ 'which' function
function which_function(){
  # use with alias of which to also resolve functions
  # and aliases as well as  files
  shopt -s extdebug
  if [[ -z $1 ]]; then
    /usr/bin/env which
  else
      declare -F "$1" && type -a "$1" ||type "$1" || alias "$1" 2>/dev/null || /usr/bin/env which "$1"
  fi
}
# }}}

# {{{ until true
function ut() {
  # run command until it succeeds
  # eg. ut git push
  until "$@"; do
    echo "trying again" >&2
    sleep 5
  done
}
# }}}

# {{{ retry ping if failed
function ping() {
  PING=/bin/ping
  [[ "$platform" == "mac" ]] && PING=/sbin/ping
  # Retry ping if failed
  if [[ -z $1 ]]; then

    $PING;
  else
    ut $PING "$@";
  fi
}
# }}}

# {{{ llwhich

function llwhich() {
    which=$(/usr//bin/env which "$1")
    if [[ -L $which ]]; then
      ls -l "$which"
    elif [[ -f "$which" ]]; then
      ls -l "$which"
    else
      echo "$which"
    fi
}
# }}}

# {{{ find and install function
function find_and_install() {
  # parses output from command-not-found-hook and installs last reccommended
  # package (arch linux)
  command=$1
  package=$($command 2>/dev/null|tail -1 | awk "{print $1}")
  echo "$package"
  if [[ -z $package ]]; then
    echo "unable to find $command"
  else
    sudo /bin/pacman -S "$package"
  fi

}
# }}}

# {{{ volume function
function volume() {
  amixer set Master "${1}"%
}
# }}}

# {{{ coundown function
function countdown() {
  # countdown number of seconds

  seconds="$1"
  date1=$(($(date +%s) + seconds -1));
  while [ "$date1" -ge "$(date +%s)" ]; do
    echo -ne "$(date -u --date @$(("$date1" - $(date +%s) )) +%H:%M:%S)\r";
  done
}
# }}}

# {{{ loop command until interrupted
function wt() {
  [ "$(which "$1")" ] && while true; do "$@"; done
}
 # }}}

# {{{ update PS1 for powerline
function _update_ps1() {
  ## Powerline Shell
  ## https://github.com/milkbikis/powerline-shell
  #PS1="$(powerline-shell --cwd-mode fancy --mode compatible --shell bash $? 2> /dev/null)"
  PS1="$(powerline-shell $?)"
}
if [ "$TERM" != "linux" ] && [ "$TERM" != "vt100" ] && [[ $(type powerline-shell 2>/dev/null) ]]; then
  export TERM=xterm-256color
  PROMPT_COMMAND="_update_ps1; $PROMPT_COMMAND"

else
  # fallback PS1
  export TERM=xterm
  PS1='\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\] \$ '
fi
#}}}

# {{{ Colours function
colors() {
  local fgc bgc vals seq0

  printf "Color escapes are %s\n" '\e[${value};...;${value}m'
  printf "Values 30..37 are \e[33mforeground colors\e[m\n"
  printf "Values 40..47 are \e[43mbackground colors\e[m\n"
  printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

  # foreground colors
  for fgc in {30..37}; do
    # background colors
    for bgc in {40..47}; do
      fgc=${fgc#37} # white
      bgc=${bgc#40} # black

      vals="${fgc:+$fgc;}${bgc}"
      vals=${vals%%;}

      seq0="${vals:+\e[${vals}m}"
      printf "  %-9s" "${seq0:-(default)}"
      printf " ${seq0}TEXT\e[m"
      printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
    done
    echo; echo
  done
}



# }}}

[[ $- != *i* ]] && return

[ -r /usr/share/bash-completion/bash_completion ] && . /usr/share/bash-completion/bash_completion

use_color=true

unset use_color safe_term match_lhs sh

alias np='nano -w PKGBUILD'

xhost +local:root > /dev/null 2>&1


# Bash won't get SIGWINCH if another process is in the foreground.
# Enable checkwinsize so that bash will check the terminal size when
# it regains control.  #65623
# http://cnswww.cns.cwru.edu/~chet/bash/FAQ (E11)
shopt -s checkwinsize

shopt -s expand_aliases

# Enable history appending instead of overwriting.  #139609
shopt -s histappend


# {{{ ex - archive extractor
# # usage: ex <file>
ex ()
{
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}
# }}}

